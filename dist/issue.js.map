{"version":3,"sources":["../server/issue.js"],"names":["validIssueStatus","New","Open","Assigned","Fixed","Verified","Closed","issueFieldType","status","owner","effort","created","completionDate","title","country","cleanupIssue","issue","cleanedUpIssue","Object","keys","forEach","field","validateIssue","errors","push","length","join"],"mappings":";;;;;AAAA;;AAEA,MAAMA,mBAAmB;AACvBC,OAAK,IADkB;AAEvBC,QAAM,IAFiB;AAGvBC,YAAU,IAHa;AAIvBC,SAAO,IAJgB;AAKvBC,YAAU,IALa;AAMvBC,UAAQ;AANe,CAAzB;;AASA,MAAMC,iBAAiB;AACvB;AACAC,UAAQ,UAFe;AAGvBC,SAAO,UAHgB;AAIvBC,UAAQ,UAJe;AAKvBC,WAAS,UALc;AAMvBC,kBAAgB,UANO;AAOvBC,SAAO,UAPgB;AAQvBC,WAAS;AARc,CAAvB;;AAWA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,QAAMC,iBAAiB,EAAvB;AACAC,SAAOC,IAAP,CAAYH,KAAZ,EAAmBI,OAAnB,CAA2BC,SAAS;AAClC,QAAId,eAAec,KAAf,CAAJ,EAA2B;AACzBJ,qBAAeI,KAAf,IAAwBL,MAAMK,KAAN,CAAxB;AACD;AACF,GAJD;AAKA,SAAOJ,cAAP;AACD;;AAED,SAASK,aAAT,CAAuBN,KAAvB,EAA8B;AAC5B,QAAMO,SAAS,EAAf;AACAL,SAAOC,IAAP,CAAYZ,cAAZ,EAA4Ba,OAA5B,CAAoCC,SAAS;AAC3C,QAAId,eAAec,KAAf,MAA0B,UAA1B,IAAwC,CAACL,MAAMK,KAAN,CAA7C,EAA2D;AACzDE,aAAOC,IAAP,CAAa,4BAA2BH,KAAM,EAA9C;AACD;AACF,GAJD;;AAMA,MAAI,CAACrB,iBAAiBgB,MAAMR,MAAvB,CAAL,EAAqC;AACnCe,WAAOC,IAAP,CAAa,GAAER,MAAMR,MAAO,yBAA5B;AACD;;AAED,SAAQe,OAAOE,MAAP,GAAgBF,OAAOG,IAAP,CAAY,IAAZ,CAAhB,GAAoC,IAA5C;AACD;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;kBAEe;AACbX,gBAAcA,YADD;AAEbO,iBAAeA;AAFF,C","file":"issue.js","sourcesContent":["// 'use strict';\r\n\r\nconst validIssueStatus = {\r\n  New: true,\r\n  Open: true,\r\n  Assigned: true,\r\n  Fixed: true,\r\n  Verified: true,\r\n  Closed: true,\r\n};\r\n\r\nconst issueFieldType = {\r\n// id: 'required',\r\nstatus: 'required',\r\nowner: 'required',\r\neffort: 'optional',\r\ncreated: 'required',\r\ncompletionDate: 'optional',\r\ntitle: 'required',\r\ncountry: 'required'\r\n};\r\n\r\nfunction cleanupIssue(issue) {\r\n  const cleanedUpIssue = {};\r\n  Object.keys(issue).forEach(field => {\r\n    if (issueFieldType[field]) {\r\n      cleanedUpIssue[field] = issue[field];\r\n    }\r\n  });\r\n  return cleanedUpIssue;\r\n}\r\n\r\nfunction validateIssue(issue) {\r\n  const errors = [];\r\n  Object.keys(issueFieldType).forEach(field => {\r\n    if (issueFieldType[field] === 'required' && !issue[field]) {\r\n      errors.push(`Missing mandatory field: ${field}`);\r\n    }\r\n  });\r\n\r\n  if (!validIssueStatus[issue.status]) {\r\n    errors.push(`${issue.status} is not a valid status.`);\r\n  }\r\n\r\n  return (errors.length ? errors.join('; ') : null);\r\n}\r\n\r\n// function validateIssue(issue){\r\n//   for(const field in issueFieldType){\r\n//     const type = issueFieldType[field];\r\n//     if(!type){\r\n//       delete issue[field];\r\n//     }\r\n//     else if(type == 'required' && !issue[field]){\r\n//       return `${field} is required`;\r\n//     }\r\n//   }\r\n//\r\n//   if(!validIssueStatus[issue.status]){\r\n//     return `${issue.status} is not a valid status`\r\n//   }\r\n//\r\n//   return null;\r\n// }\r\n\r\n// module.exports = {\r\n//   validateIssue: validateIssue\r\n// };\r\n\r\nexport default {\r\n  cleanupIssue: cleanupIssue,\r\n  validateIssue: validateIssue,\r\n};\r\n"]}